{"version":3,"sources":["calendar/dayPicker/CalendarPicker.js","calendar/notices/Notice.js","calendar/notices/NoticeList.js","calendar/notices/DailyEvents.js","calendar/scheduler/CustomAdaptor.js","calendar/scheduler/HourlyGrid.js","calendar/scheduler/HourlyGridContainer.js","calendar/MainCalendar.js","calendar/event/Event.js","calendar/event/EventList.js","navbar/SearchButtonModal.js","navbar/SearchField.js","navbar/ListModal.js","notification/NotificationHandler.js","navbar/NavBar.js","App.js","index.js","notification/NotifTest.js","serviceWorker.js"],"names":["CalendarPicker","props","handleChange","bind","state","value","Date","datesWithEvents","prevProps","prevState","snapshot","todaySelected","this","fetchDates","onDateChange","setState","URL","console","log","axios","get","then","response","data","catch","e","className","tileContent","addStylingToDate","onChange","activeStartDate","date","view","dateHasEvents","Array","isArray","length","i","moment","isSame","Component","Notice","editNotice","modifiedText","updatedNotice","id","noticeName","put","res","finally","updated","deleteNotice","delete","divStyle","hasDeleteButton","backgroundColor","width","border","minHeight","fontWeight","fontSize","display","style","type","onSave","saveButtonLabel","placeholder","React","NoticeList","notices","map","key","padding","displayNotices","DailyEvents","updatedEvent","setTimeout","fetchNotices","recurringEvent","preventDefault","text","handleSubmit","selectedDay","format","target","trim","newItem","day","post","onSubmit","flex","onClick","CustomAdaptor","batchRequest","dm","changes","_this","url","dataSource","replace","options","batch","resourceTableName","req","x","addedRecords","forEach","j","push","insertUrl","crudUrl","JSON","stringify","_loop_2","changedRecords","d","updateType","stat","updateUrl","_loop_3","deletedRecords","DataUtil","getObject","parse","isGuid","toJSON","removeUrl","contentType","join","ds","query","xhr","request","original","apply","arguments","item","WebApiAdaptor","HourlyGrid","dataManager","DataManager","adaptor","batchUrl","requestType","setInterval","forceUpdate","whatDay","currentView","showHeaderBar","height","eventSettings","selectedDate","startHour","services","Day","Resize","DragAndDrop","HourlyGridContainer","MainCalendar","handleDateChange","split","minSize","maxSize","pane2Style","overflowY","Event","deleteEvent","color","description","location","deleteButton","eventDescription","eventLocation","Button","variant","float","eventName","styleDate","eventStartTime","eventEndTime","EventList","events","startTime","endTime","displayEvents","SearchButtonModal","handleShow","fetchEvents","show","handleClose","queryString","Modal","onHide","Header","closeButton","Title","Body","Footer","SearchField","updateTextValue","event","name","ListModal","noOfDays","timePeriod","convertPeriodToDays","multiplier","size","marginLeft","defaultValue","marginRight","trigger","content","componentRef","ref","el","NotificationHandler","createNotification","mins","store","addNotification","title","message","container","animationIn","animationOut","audio","play","Audio","clearInterval","interval","now","startOf","minutesUntilEvent","diff","includes","NavBar","goToToday","NotifTest","App","useState","setDate","ReactDOM","render","document","getElementById","serviceWorker","subscribe","global","registration","pushManager","userVisibleOnly","applicationServerKey","urlB64ToUint8Array","sub","err","testPushMessage","showNotification","body","base64String","base64","repeat","rawData","window","atob","outputArray","Uint8Array","charCodeAt","isLocalhost","Boolean","hostname","match","register","config","navigator","process","href","origin","addEventListener","swUrl","fetch","headers","status","indexOf","ready","unregister","reload","registerValidSW","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error"],"mappings":"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","file":"static/js/main.7cb47735.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport Calendar from 'react-calendar';\nimport './CalendarPickerWidget.css'\nimport axios from \"axios\";\nimport moment from \"moment\";\n\nclass CalendarPicker extends Component {\n    constructor(props) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n        this.state = {\n            value: new Date(),\n            datesWithEvents: []\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if(prevProps.todaySelected !== this.props.todaySelected)\n        {\n            this.handleChange(this.props.todaySelected);\n        }\n    }\n\n    componentDidMount() {\n        this.fetchDates();\n    }\n\n    handleChange(value) {\n        this.props.onDateChange(value);\n        this.setState({value});\n        this.fetchDates();\n    }\n\n    fetchDates() {\n        const URL = 'api/all/daysWithEvents';\n        console.log(URL);\n        axios.get(URL)\n            .then(response => {\n                this.setState({\n                    datesWithEvents: response.data,\n                });\n            })\n            .catch(e => {\n                console.log(e);\n            });\n    }\n\n    render() {\n        const value = this.state.value;\n\n        return (\n            <Calendar\n                className={'calendarPicker'}\n                tileContent={this.addStylingToDate()}\n                onChange={this.handleChange}\n                value={value}\n            />\n        );\n    }\n\n    addStylingToDate() {\n        return ({activeStartDate, date, view}) => {\n            return view === 'month' && this.dateHasEvents(date) ? \"⚫\" : null;\n        };\n    }\n\n    dateHasEvents(date) {\n        let containsEvents = false;\n        if (Array.isArray(this.state.datesWithEvents) && this.state.datesWithEvents.length > 0) {\n            for (let i = 0; i < this.state.datesWithEvents.length; i++) {\n                if (moment(this.state.datesWithEvents[i]).isSame(date, \"day\")) {\n                    return true;\n                }\n            }\n        }\n        return containsEvents;\n    }\n}\n\nexport default CalendarPicker;\n","import React from \"react\";\nimport axios from \"axios\";\nimport EasyEdit from \"react-easy-edit\";\n\nclass Notice extends React.Component {\n    constructor(props) {\n        super(props);\n        this.deleteNotice = this.deleteNotice.bind(this);\n    }\n\n    editNotice = (modifiedText) => {\n        if (modifiedText === '') {\n            this.deleteNotice();\n            return;\n        }\n        const updatedNotice = {\n            id: this.props.id,\n            noticeName: modifiedText\n        };\n        const URL = '/api/notices/edit/';\n        console.log(URL);\n        axios.put(URL, updatedNotice)\n            .then(res => console.log(res))\n            .catch(e => {\n                console.log(e);\n            })\n            .finally(this.props.updated());\n    }\n\n    deleteNotice = () => {\n        const URL = '/api/notices/deleteByNoticeId/' + this.props.id;\n        console.log(URL);\n        axios.delete(URL)\n            .catch(e => {\n                console.log(e);\n            })\n            .finally(this.props.updated());\n    }\n\n    render() {\n        let divStyle;\n        if (this.props.hasDeleteButton) {\n            divStyle = {\n                backgroundColor: \"#d4d4d9\",\n                width: \"available\",\n                border: \"thin solid #7889FF\",\n                minHeight: \"35px\",\n                fontWeight: \"bold\",\n                fontSize: \"25px\"\n            };\n        } else {\n            divStyle = {\n                display: \"inline-block\",\n                backgroundColor: \"#d4d4d9\",\n                border: \"thin solid #7889FF\",\n                minHeight: \"35px\",\n                fontWeight: \"bold\",\n                fontSize: \"25px\"\n            };\n        }\n\n        return (\n            <div style={divStyle}>\n                <EasyEdit\n                    type=\"textarea\"\n                    onSave={this.editNotice}\n                    value={this.props.noticeName}\n                    saveButtonLabel=\"Save\"\n                    placeholder={\"\"}\n                />\n            </div>\n        );\n    }\n}\n\nexport default Notice;\n","import React from \"react\";\nimport Notice from \"./Notice\";\n\nclass NoticeList extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange = () => {\n        this.props.updated();\n    }\n\n    displayNotices() {\n        if (!Array.isArray(this.props.notices) || !this.props.notices.length) {\n            return \"No notices to display.\";\n        } else {\n            return this.props.notices.map((e) =>\n                <Notice\n                    key={e.id}\n                    id={e.id}\n                    noticeName={e.noticeName}\n                    updated={this.handleChange}\n                    hasDeleteButton={this.props.hasDeleteButton}\n                />);\n        }\n    }\n\n    render() {\n        let padding;\n        if (!this.props.hasDeleteButton) {\n            padding = {padding: \"60px\"};\n        }\n        return (\n            <div style={padding}>\n                {this.displayNotices()}\n            </div>\n        );\n    }\n}\n\nexport default NoticeList;\n","import React from \"react\";\nimport axios from \"axios\";\nimport NoticeList from \"./NoticeList\";\nimport moment from \"moment\";\n\nclass DailyEvents extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {notices: [], text: ''};\n        this.updatedEvent = this.updatedEvent.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.fetchNotices();\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (prevProps.selectedDay !== this.props.selectedDay) {\n            this.fetchNotices();\n        }\n    }\n\n    updatedEvent = () => {\n        setTimeout(() => {this.fetchNotices()}, 150);\n    }\n\n    fetchNotices() {\n        let selectedDay = this.props.selectedDay;\n        const URL = '/api/notices/day/' + moment(selectedDay).format();\n        console.log(URL);\n        axios.get(URL)\n            .then(response => this.setState({\n                notices: response.data,\n            }))\n            .catch(e => {\n                console.log(e);\n            });\n    }\n\n    handleChange(e) {\n        this.setState({text: e.target.value});\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n        let trimmedValue = this.state.text.trim();\n        if (trimmedValue.length === 0) {\n            this.setState(state => ({\n                ...state,\n                text: ''\n            }));\n            return;\n        }\n        const newItem = {\n            noticeName: this.state.text,\n            day: this.props.selectedDay\n        };\n\n        axios.post(\"/api/notices/add\", newItem)\n            .then(res => console.log(res))\n            .then(() => this.fetchNotices())\n        this.setState(state => ({\n            ...state,\n            text: ''\n        }));\n    }\n\n    recurringEvent = (e) => {\n        e.preventDefault();\n        console.log(this.state.text);\n    }\n\n    render() {\n        return (\n            <div>\n                <div>\n                    <form onSubmit={this.handleSubmit} style={{display: \"flex\"}}>\n                        <input\n                            style={{width: \"75%\", flex: \"auto\"}}\n                            id=\"new-todo\"\n                            onChange={this.handleChange}\n                            value={this.state.text}\n                        />\n                        <button type=\"submit\">\n                            Add\n                        </button>\n                        <button type=\"button\" onClick={this.recurringEvent}>\n                            Repeat\n                        </button>\n                    </form>\n                </div>\n\n                <NoticeList\n                    notices={this.state.notices}\n                    updated={this.updatedEvent}\n                    hasDeleteButton={true}\n                />\n            </div>\n        );\n    }\n}\n\nexport default DailyEvents;\n","import {DataUtil, WebApiAdaptor} from \"@syncfusion/ej2-data\";\n\nclass CustomAdaptor extends WebApiAdaptor {\n\n    /**\n     * Returns the data from the query processing. It is checking if there is a response, and then processing the data.\n     *\n     * @param  {DataResult} data\n     * @param  {DataOptions} ds?\n     * @param  {Query} query?\n     * @param  {XMLHttpRequest} xhr?\n     * @param  {Ajax} request?\n     * @param  {CrudOptions} changes?\n     * @returns aggregateResult\n     */\n    processResponse(data, ds, query, xhr, request, changes) {\n        // calling base class processResponse function\n        let original = super.processResponse.apply(this, arguments);\n        // do something only if there is a response\n        if (original !== \"\") {\n            original.forEach((item) => {\n                item['EventID'] = item['id'];\n                item['Subject'] = item['eventName'];\n                item['StartTime'] = item['startTime'];\n                item['EndTime'] = item['endTime'];\n                item['Description'] = item['description'];\n                item['RecurrenceRule'] = item['recurrenceRule'];\n                item['Location'] = item['location'];\n                item['IsAllDay'] = item['isAllDay'];\n            });\n        }\n        return original;\n    }\n\n    /**\n     * Prepare the request body based on the newly added, removed and updated records.\n     * The result is used by the batch request.\n     * @param  {DataManager} dm\n     * @param  {CrudOptions} changes\n     * @param  {RemoteArgs} e\n     * @returns {Object}\n     */\n    batchRequest = function (dm, changes, e) {\n        let _this = this;\n        let url = dm.dataSource.url.replace(/\\/*$/, '/' + this.options.batch);\n        e.url = this.resourceTableName ? this.resourceTableName : e.url;\n        let req = [];\n        let _loop_1 = function (i) {\n            changes.addedRecords.forEach(function (j) {\n                req.push('POST /api/' + (dm.dataSource.insertUrl || dm.dataSource.crudUrl || e.url) + ' HTTP/1.1');\n                req.push(j ? JSON.stringify(j) : '');\n            });\n        };\n        //insertion\n        for (let i = 0, x = changes.addedRecords.length; i < x; i++) {\n            _loop_1(i);\n        }\n        let _loop_2 = function (i) {\n            changes.changedRecords.forEach(function (j, d) {\n                let stat = {\n                    'method': _this.options.updateType + ' ',\n                    'url': function (data, i, key) { return ''; },\n                    'data': function (data, i) { return JSON.stringify(data[i]) + '\\n\\n'; }\n                };\n                req.push('PUT /api/' + (dm.dataSource.updateUrl || dm.dataSource.crudUrl || e.url)\n                    + stat.url(changes.changedRecords, i, e.key) + ' HTTP/1.1');\n                req.push(j ? JSON.stringify(j) : '');\n            });\n        };\n        //updating\n        for (let i = 0, x = changes.changedRecords.length; i < x; i++) {\n            _loop_2(i);\n        }\n        let _loop_3 = function (i) {\n            changes.deletedRecords.forEach(function (j, d) {\n                let state = {\n                    'mtd': 'DELETE ',\n                    'url': function (data, i, key) {\n                        let url = DataUtil.getObject(key, data[i]);\n                        if (typeof url === 'number' || DataUtil.parse.isGuid(url)) {\n                            return '/' + url;\n                        }\n                        else if (url instanceof Date) {\n                            let datTime = data[i][key];\n                            return '/' + datTime.toJSON();\n                        }\n                        else {\n                            return \"/'\" + url + \"'\";\n                        }\n                    },\n                    'data': function (data, i) { return ''; }\n                };\n                req.push('DELETE /api/' + (dm.dataSource.removeUrl || dm.dataSource.crudUrl || e.url)\n                    + state.url(changes.deletedRecords, i, \"id\") + ' HTTP/1.1');\n                req.push(j ? JSON.stringify(j) : '');\n            });\n        };\n        //deletion\n        for (let i = 0, x = changes.deletedRecords.length; i < x; i++) {\n            _loop_3(i);\n        }\n        return {\n            type: 'POST',\n            url: url,\n            contentType: '',\n            data: req.join('\\r\\n')\n        };\n    };\n}\n\nexport default CustomAdaptor;\n","import React from 'react';\nimport {Day, DragAndDrop, Inject, Resize, ScheduleComponent} from \"@syncfusion/ej2-react-schedule\";\nimport {DataManager} from \"@syncfusion/ej2-data\";\nimport CustomAdaptor from \"./CustomAdaptor\";\nimport './HourlyGrid.css'\n\nclass HourlyGrid extends React.Component {\n    constructor(props) {\n        super(props);\n        this.dataManager = new DataManager({\n            url: '/api/events/calendar',\n            adaptor: new CustomAdaptor(),\n            batchUrl: '/$batch',\n            // crudUrl: '',\n            insertUrl: 'events/calendar/add',\n            updateUrl: 'events/calendar/edit',\n            removeUrl: 'events/calendar/delete',\n            requestType: ''\n        });\n        setInterval(() => {\n            this.forceUpdate();\n        }, 2000)\n    }\n\n    render() {\n        let whatDay = this.props.selectedDay;\n        return (\n            <ScheduleComponent\n                style={{backgroundColor: 'lightgray'}}\n                currentView='day'\n                showHeaderBar={false}\n                height='100%'\n                eventSettings={{dataSource: this.dataManager}}\n                selectedDate={whatDay}\n                startHour='09:00'\n            >\n                <Inject services={[Day, Resize, DragAndDrop]}/>\n            </ScheduleComponent>\n        )\n    }\n}\n\nexport default HourlyGrid;\n","import React from 'react';\nimport HourlyGrid from \"./HourlyGrid\";\n\nclass HourlyGridContainer extends React.Component {\n    render() {\n        let whatDay = this.props.selectedDay;\n        return (\n            <div className=\"displayEvents\">\n                <HourlyGrid selectedDay={whatDay}/>\n            </div>\n        )\n    }\n}\n\nexport default HourlyGridContainer;\n","import React from \"react\";\nimport SplitPane from \"react-split-pane\";\nimport './SplitPaneStyle.css';\nimport CalendarPicker from \"./dayPicker/CalendarPicker\";\nimport DailyEvents from \"./notices/DailyEvents\";\nimport './MainCalendarStyle.css';\nimport HourlyGridContainer from \"./scheduler/HourlyGridContainer\";\n\nclass MainCalendar extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {selectedDay: new Date()}\n        this.handleDateChange = this.handleDateChange.bind(this);\n    }\n\n    handleDateChange(value) {\n        this.setState({\n            selectedDay: value\n        }, () => console.log(this.state.selectedDay));\n    }\n\n    render() {\n        const selectedDay = this.state.selectedDay;\n        return (\n            <div className=\"mainCalendarWidget\">\n                <SplitPane split=\"vertical\" minSize={300}>\n                    <SplitPane split=\"horizontal\" minSize={388} maxSize={475} pane2Style={{overflowY: 'auto'}}>\n                        <CalendarPicker onDateChange={this.handleDateChange} todaySelected={this.props.todaySelected}/>\n                        <DailyEvents selectedDay={selectedDay}/>\n                    </SplitPane>\n\n                    <HourlyGridContainer selectedDay={selectedDay}/>\n                </SplitPane>\n            </div>\n        );\n    }\n}\n\nexport default MainCalendar;\n","import React from \"react\";\nimport axios from \"axios\";\nimport moment from 'moment';\nimport Button from \"react-bootstrap/Button\";\n\nclass Event extends React.Component\n{\n    constructor(props) {\n        super(props);\n        this.deleteEvent = this.deleteEvent.bind(this);\n    }\n\n    deleteEvent = () => {\n        const URL = '/api/events/deleteByEventId/' + this.props.id;\n        console.log(URL);\n        axios.delete(URL)\n            .catch(e => {\n                console.log(e);\n            })\n            .finally(this.props.updated());\n    }\n\n    styleDate(date){\n        return (\n            <span>\n                <span style={{fontWeight: \"bold\", color: \"#084498\"}}>{moment(date).format(\"HH:mm\")}</span>\n                {moment(date).format(\" dddd, Do MMM YYYY\")}\n            </span>\n        );\n    }\n\n    render() {\n        let description;\n        if (this.props.eventDescription) {\n            description = <div>Description: {this.props.eventDescription}</div>;\n        }\n\n        let location;\n        if (this.props.eventLocation) {\n            location = <div>Location: {this.props.eventLocation}</div>;\n        }\n\n        let deleteButton;\n        if (this.props.hasDeleteButton) {\n            deleteButton =\n                <Button variant=\"danger\"\n                        onClick={this.deleteEvent}\n                        style={{float: \"right\"}}\n                >\n                    Delete\n                </Button>\n        }\n\n        let divStyle;\n        if (this.props.hasDeleteButton) {\n            divStyle = {\n                backgroundColor: \"#d4d4d9\",\n                width: \"available\",\n                border: \"thin solid #7889FF\",\n                minHeight: \"60px\"\n            };\n        } else {\n            divStyle = {\n                display: \"inline-block\",\n                backgroundColor: \"#d4d4d9\",\n                border: \"thin solid #7889FF\",\n                minHeight: \"60px\"\n            };\n        }\n        return (\n            <div style={divStyle}>\n                <div style={{fontWeight: \"bold\", fontSize: \"22px\"}}>\n                    {this.props.eventName}\n                    {deleteButton}\n                </div>\n                {description}\n                {location}\n                <div>From: {this.styleDate(this.props.eventStartTime)}</div>\n                <div>To: {this.styleDate(this.props.eventEndTime)}</div>\n            </div>\n        );\n    }\n}\n\nexport default Event;\n","import React from \"react\";\nimport Event from \"./Event\";\n\nclass EventList extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange = () => {\n        this.props.updated();\n    }\n\n    displayEvents() {\n        if (!Array.isArray(this.props.events) || !this.props.events.length) {\n            return \"No events to display.\";\n        } else {\n            return this.props.events.map((e) =>\n                <Event\n                    key={e.id}\n                    id={e.id}\n                    eventName={e.eventName}\n                    eventDescription={e.description}\n                    eventLocation={e.location}\n                    eventStartTime={e.startTime}\n                    eventEndTime={e.endTime}\n                    updated={this.handleChange}\n                    hasDeleteButton={this.props.hasDeleteButton}\n                />);\n        }\n    }\n\n    render() {\n        let padding;\n        if (!this.props.hasDeleteButton) {\n            padding = {padding: \"60px\"};\n        }\n        return (\n            <div style={padding}>\n                {this.displayEvents()}\n            </div>\n        )\n    }\n}\n\nexport default EventList;\n","import React, {Component} from \"react\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Button from \"react-bootstrap/Button\";\nimport axios from \"axios\";\nimport EventList from \"../calendar/event/EventList\";\n\nclass SearchButtonModal extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            show: false,\n            events: []\n        };\n        this.updatedEvent = this.updatedEvent.bind(this);\n    }\n\n    handleShow = () => {\n        this.fetchEvents();\n        this.setState({show: true});\n    };\n\n    handleClose = () => {\n        this.setState({show: false});\n    };\n\n    updatedEvent = () => {\n        setTimeout(() => {this.fetchEvents()}, 150);\n    }\n\n    fetchEvents() {\n        let queryString = this.props.queryString;\n        const URL = '/api/events/eventNameContaining/' + queryString;\n        console.log(URL);\n        axios.get(URL)\n            .then(response => this.setState({\n                events: response.data,\n            }))\n            .catch(e => {\n                console.log(e);\n            });\n    }\n\n    render() {\n        return (\n            <>\n                <Button variant=\"primary\" onClick={this.handleShow}>\n                    Search\n                </Button>\n\n                <Modal show={this.state.show} onHide={this.handleClose}>\n                    <Modal.Header closeButton>\n                        <Modal.Title>Events containing '{this.props.queryString}'</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <EventList\n                            events={this.state.events}\n                            updated={this.updatedEvent}\n                            hasDeleteButton={true}\n                        />\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button variant=\"secondary\" onClick={this.handleClose}>\n                            Close\n                        </Button>\n                    </Modal.Footer>\n                </Modal>\n            </>\n        );\n    }\n}\n\nexport default SearchButtonModal;\n","import React, {Component} from \"react\";\nimport './modal.css'\nimport SearchButtonModal from \"./SearchButtonModal\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nclass SearchField extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {queryString : ''};\n        this.updateTextValue = this.updateTextValue.bind(this);\n    }\n\n    updateTextValue(event) {\n        this.setState({queryString : event.target.value});\n    }\n\n    render() {\n        return (\n            <div className={\"searchBox\"}>\n                <input type=\"text\"\n                       name=\"searchBoxQuery\"\n                       placeholder=\"Search for events\"\n                       value={this.state.queryString}\n                       onChange={this.updateTextValue}/>\n                <SearchButtonModal queryString={this.state.queryString}/>\n            </div>\n        );\n    }\n}\n\nexport default SearchField;\n","import React, {Component} from \"react\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Button from \"react-bootstrap/Button\";\nimport ReactToPrint from \"react-to-print\";\nimport axios from \"axios\";\nimport EventList from \"../calendar/event/EventList\";\n\nclass ListModal extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            show: false,\n            events: [],\n            noOfDays: 1,\n            timePeriod: 'day'\n        };\n        this.convertPeriodToDays = this.convertPeriodToDays.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.fetchEvents = this.fetchEvents.bind(this);\n        this.updatedEvent = this.updatedEvent.bind(this);\n    }\n\n    handleShow = () => {\n        this.setState({show: true});\n        this.fetchEvents();\n    };\n\n    handleChange(event) {\n        this.setState({timePeriod: event.target.value});\n    };\n\n    handleClose = () => {\n        this.setState({\n            show: false,\n            events: [],\n            noOfDays: 1,\n            timePeriod: 'day'\n        });\n    };\n\n    updatedEvent = () => {\n        setTimeout(() => {this.fetchEvents()}, 150);\n    }\n\n    fetchEvents() {\n        const timePeriod = this.convertPeriodToDays();\n        const URL = '/api/events/period/' + timePeriod;\n        console.log(URL);\n        axios.get(URL)\n            .then(response => this.setState({\n                events: response.data,\n            }))\n            .catch(e => {\n                console.log(e);\n            });\n    }\n\n    convertPeriodToDays = () => {\n        let timePeriod = this.state.noOfDays;\n        let unitOfMeasure = this.state.timePeriod;\n\n        let multiplier;\n        switch(unitOfMeasure)\n        {\n            case \"year\": multiplier = 365; break;\n            case \"month\": multiplier = 30; break;\n            case \"week\": multiplier = 7; break;\n            case \"day\": multiplier = 1; break;\n            default: multiplier = 1;\n        }\n\n        return timePeriod * multiplier;\n    }\n\n    render() {\n        return (\n            <>\n                <Button variant=\"primary\" onClick={this.handleShow}>\n                    List Events\n                </Button>\n\n                <Modal size=\"lg\"\n                       show={this.state.show}\n                       onHide={this.handleClose}\n                >\n                    <Modal.Header closeButton>\n                        <Modal.Title>Upcoming events in:</Modal.Title>\n                        <input type=\"number\"\n                               style={{height: \"38px\", marginLeft: \"5px\", width: \"50px\"}}\n                               defaultValue={1}\n                               onChange={event => this.setState({noOfDays: event.target.value.replace(/\\D/,'')})}\n                        />\n                        <label>\n                            <select value={this.state.timePeriod}\n                                    onChange={this.handleChange}\n                                    style={{height: \"38px\", marginLeft: \"5px\", marginRight: \"5px\"}}\n                            >\n                                <option value=\"day\">day</option>\n                                <option value=\"week\">week</option>\n                                <option value=\"month\">month</option>\n                                <option value=\"year\">year</option>\n                            </select>\n                        </label>\n                        <Button variant=\"primary\" onClick={this.fetchEvents}>\n                            List\n                        </Button>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <EventList events={this.state.events}\n                                   updated={this.updatedEvent}\n                                   hasDeleteButton={true}\n                        />\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <ReactToPrint\n                            trigger={() => <Button variant=\"primary\">Print</Button>}\n                            content={() => this.componentRef}\n                        />\n                        <div style={{ display: \"none\"}}>\n                            <EventList\n                                events={this.state.events}\n                                updated={this.updatedEvent}\n                                hasDeleteButton={false}\n                                ref={el => (this.componentRef = el)}\n                            />\n                        </div>\n                        <Button variant=\"secondary\" onClick={this.handleClose}>\n                            Close\n                        </Button>\n                    </Modal.Footer>\n                </Modal>\n            </>\n        );\n    }\n}\n\nexport default ListModal;\n","import React from \"react\";\nimport ReactNotification, {store} from 'react-notifications-component';\nimport 'react-notifications-component/dist/theme.css'\nimport 'animate.css';\nimport axios from \"axios\";\nimport moment from \"moment\";\n\nclass NotificationHandler extends React.Component {\n    constructor(props) {\n        super(props);\n        this.fetchDates();\n        this.audio = new Audio(\"../../public/soundAlert.wav\");\n    }\n\n    componentDidMount() {\n        setInterval(() => this.fetchDates(), 60 * 1000);\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.interval);\n    }\n\n    fetchDates() {\n        const URL = 'api/events/nextMinutes/60';\n        axios.get(URL)\n            .then(response => {\n                const now = moment(new Date()).startOf('minute');\n                response.data.map((e) => {\n                    const eventTime = moment(e.startTime).startOf('minute');\n                    const minutesUntilEvent = eventTime.diff(now, 'minutes');\n                    if ([1,5,10,15,30,60].includes(minutesUntilEvent)) {\n                        this.createNotification(e.eventName, e.startTime, minutesUntilEvent);\n                    }\n                })\n            })\n            .catch(e => {\n                console.log(e);\n            });\n    }\n\n    createNotification = (name, date, mins) => {\n        store.addNotification({\n            title: name,\n            message: 'Event starts at ' + moment(date).format(\"HH:mm\") + ', in ' + mins + ' minutes',\n            type: 'warning',                         // 'default', 'success', 'info', 'warning'\n            container: 'bottom-right',                // where to position the notifications\n            animationIn: [\"animated\", \"fadeIn\"],     // animate.css classes that's applied\n            animationOut: [\"animated\", \"fadeOut\"],   // animate.css classes that's applied\n            // dismiss: {\n            //     duration: 10000,\n            //     onScreen: true\n            // }\n        });\n        this.audio.play();\n    }\n\n    render() {\n        return (\n            <ReactNotification/>\n        );\n    }\n}\n\nexport default NotificationHandler;\n","import React from \"react\";\nimport \"./Navbar.css\"\nimport SearchField from \"./SearchField\";\nimport ListModal from \"./ListModal\";\nimport NotificationHandler from \"../notification/NotificationHandler\";\nimport Button from \"react-bootstrap/Button\";\nimport NotifTest from \"../notification/NotifTest\";\n\nclass NavBar extends React.Component\n{\n    render() {\n        return (\n            <div className=\"navBar\">\n                <NotificationHandler/>\n                <div className=\"ical-logo\">Ical</div>\n                <div className=\"today-button\">\n                    <Button onClick={this.props.goToToday}>Today</Button>\n                </div>\n                <div className=\"list-modal-following\">\n                    <ListModal/>\n                </div>\n                <SearchField/>\n                <NotifTest/>\n            </div>\n        );\n    }\n}\n\nexport default NavBar;\n","import React, {useState} from 'react';\nimport './App.css';\nimport MainCalendar from \"./calendar/MainCalendar\";\nimport NavBar from \"./navbar/NavBar\";\n\nfunction App() {\n    const [date, setDate] = useState(new Date());\n\n    function goToToday(){\n        console.log(\"Selected today\");\n        setDate(new Date());\n    }\n\n    return (\n        <div className=\"App\">\n            <NavBar goToToday={goToToday}/>\n            <MainCalendar todaySelected={date}/>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","import React from \"react\";\nimport \"../navbar/Navbar.css\"\n\nclass NotifTest extends React.Component\n{\n    urlB64ToUint8Array(base64String) {\n    const padding = '='.repeat((4 - base64String.length % 4) % 4);\n    const base64 = (base64String + padding)\n        .replace(/\\-/g, '+')\n        .replace(/_/g, '/');\n\n    const rawData = window.atob(base64);\n    const outputArray = new Uint8Array(rawData.length);\n\n    for (let i = 0; i < rawData.length; ++i) {\n        outputArray[i] = rawData.charCodeAt(i);\n    }\n    return outputArray;\n}\n\n    subscribe = () => {\n        const key = \"BDk-kDxLswQMajg9TJqpb9VFTjQeQmS0FE_rTVJ4f9G-v9GFkzcDt-vYkvz5dVkbCfrGmJeLTbvuNUKpOUojWB4\"\n\n        global.registration.pushManager.subscribe({\n            userVisibleOnly: true,\n            applicationServerKey: this.urlB64ToUint8Array(key)\n        }).then(sub => {\n            console.log(\"Subscribed!\")\n        }).catch(err => {\n            console.log(\"Did not subscribe.\")\n        })\n\n    }\n\n    testPushMessage = () => {\n        global.registration.showNotification('Test Message', {\n            body: 'Success!'\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"manage-notifications-button\">\n                <div>\n                    <button onClick={this.subscribe}>Subscribe for Notifications</button>\n\n                    <br />\n                    <button\n                        onClick={this.testPushMessage}\n                    >Test Push Message</button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default NotifTest;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      global.registration = registration;\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n"],"sourceRoot":""}